<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Debugging on Bumsik Kim</title>
    <link>https://kbumsik.github.io/tags/debugging/index.xml</link>
    <description>Recent content in Debugging on Bumsik Kim</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://kbumsik.github.io/tags/debugging/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Boost Up Debugging STM32 Boards by converting ST-Link into J-Link OB</title>
      <link>https://kbumsik.github.io/post/Converting-STLink-to-JLink/</link>
      <pubDate>Fri, 24 Feb 2017 23:56:41 -0500</pubDate>
      
      <guid>https://kbumsik.github.io/post/Converting-STLink-to-JLink/</guid>
      <description>

&lt;p&gt;My favorite development boards are ST Microelectronics’ STM32F4-Discovery
and STM32 Nucleo 64 lines. These fantastic boards are high performance
and well-documented. Best of all, they are so cheap ($10~$20) that anyone
 can buy it.&lt;/p&gt;

&lt;h2 id=&#34;on-board-debugger-is-slow&#34;&gt;On-board Debugger Is Slow&lt;/h2&gt;

&lt;p&gt;One interesting thing about these boards is that they come with a on-board
debugger, ST-LINK V2/V2.1, and they provide interfaces to debug external MCUs.
One top of that, a Nucleo-64 can be cut into a main board and a ST-LINK V2.1
and you can use the ST-LINK V2.1 as a separate debugger.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://kbumsik.github.io/img/post/nucleo-structure.png&#34; alt=&#34;Structure of Nucleo 64 board. You can cut ST-LINK part or the PCB.&#34; width=&#34;350&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Structure of Nucleo 64 board. You can cut ST-LINK part or the PCB.
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;However, there is one slight caveat: the on-board ST-LINK is a bit slow.
It takes several seconds to write program into the MCU and stepping down
lines is quite slow. Especially, when you step down a delay function
(e.g. HAL_Delay()) you would see a noticeable slowdown. Well, it is quite
understandable as these boards are small and cheap embedded systems and it
is likely to have a low performance debugger. But it would not take a long
time to realize that is just an excuse when you debug other manufacturer boards.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://kbumsik.github.io/img/post/j-link-ob.png&#34; alt=&#34;Top: J-Link. Bottom: J-Link OB attached to a target MCU.&#34; width=&#34;350&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Top: J-Link. Bottom: J-Link OB attached to a target MCU.
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;converting-on-board-debugger-into-j-link&#34;&gt;Converting On-board Debugger Into J-Link&lt;/h2&gt;

&lt;p&gt;Good news: You can turn the on-board ST-LINK into SEGGER J-Link and get a
huge debugging performance increase. SEGGER J-Link is very popular commercial
debugger/programmer for Cortex-M. This is very reliable and usually
“it just works” without configuration headaches. Every IDE for embedded
system supports them. Even though it is not open source hardware, some 
&lt;a href=&#34;http://gnuarmeclipse.github.io/debug/&#34;&gt;open source projects prefer using this&lt;/a&gt;.
Since it is a professional commercial tool, the price is quite high;
starting from $400, $60 for educational purpose. SEGGER also have solution
for development board manufacturers. They offers debugging chip that can be
used with their development boards. They are called J-Link OB. I guess
OB stands for On-Board.&lt;/p&gt;

&lt;p&gt;Getting back to the main topic, &lt;a href=&#34;https://www.segger.com/pr-jlink-st-link.html&#34;&gt;SEGGER recently released J-Link OB firmware
for on-board ST-LINK&lt;/a&gt;. You can
now convert the ST-LINK into a J-Link OB for free! Here is the link: &lt;a href=&#34;https://www.segger.com/jlink-st-link.html&#34;&gt;https://www.segger.com/jlink-st-link.html&lt;/a&gt;
Don’t worry – you can roll back your debugger into the original one anytime
you want. The link has a full instructions on how to install and use the
program. It does not limit any capabilities of your Discovery/Nucleo boards,
including virtual USB COM port.&lt;/p&gt;

&lt;h2 id=&#34;configuration-after-converting&#34;&gt;Configuration After Converting&lt;/h2&gt;

&lt;p&gt;You need to change your debugging setting of your project to use the J-Link OB,
since the debugging probe is changed into J-Link. In most IDEs, it will be
as easy as clicking a few buttons. If you are using OpenOCD, you need to
manually change the cfg files. Open the cfg file and change the line source
&lt;code&gt;find interface/stlink-v2-1.cfg&lt;/code&gt; into source &lt;code&gt;find interface/jlink.cfg&lt;/code&gt; .
Now it’s time to debug! You will see how fast it becomes very fast.
Happy debugging :)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>